data183 <- redcap_read(redcap_uri = "119047", records = "183", token = "09B0A6B7F207F51C6F656BAE567FA390")
data183 <- redcap_read_oneshot(redcap_uri = "119047", records = "183", token = "09B0A6B7F207F51C6F656BAE567FA390")
data183 <- redcap_read_oneshot(redcap_uri = "https://redcap.vanderbilt.edu/api/", records = "183", token = "09B0A6B7F207F51C6F656BAE567FA390")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", records = "183", token = "09B0A6B7F207F51C6F656BAE567FA390")
View(data183)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390")
View(data183)
data183$data$map_id
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "201")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183")
data183 <- redcap_read_oneshot(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183")
data183 <- redcap_read_oneshot(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", fields = "map_id",raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "eligibility_arm_1",raw_or_label_headers = "label")
data183$data
View(data183)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "enrollmentbaseline_arm_1",raw_or_label_headers = "label")
data183$data
ncol(data183$data)
nrow(data183$data)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "18month_followup_arm_1",raw_or_label_headers = "label")
data183$data
ncol(data183$data)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "5year_followup_arm_1",raw_or_label_headers = "label")
ncol(data183$data)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "7year_followup_arm_1",raw_or_label_headers = "label")
data183$data
ncol(data183$data)
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", fields = "map_id" , events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183$data
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "visit_flow_sheet_notes" , events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "consent_checklist" , events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183$data
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "informant_information" , events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183$data
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "visit_flow_sheet_notes" , events = "3year_followup_arm_1",raw_or_label_headers = "label")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "visit_flow_sheet_notes" , events = "3year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "visit_flow_sheet_notes" , events = "5year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", forms = "visit_flow_sheet_notes" , events = "3year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", fields = "np_notes" , events = "3year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", fields = "np_notes" , events = "5year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183", fields = "np_notes" , events = "3year_followup_arm_1")
data183 <- redcap_read(redcap_uri = "https://redcap.vanderbilt.edu/api/", token = "09B0A6B7F207F51C6F656BAE567FA390", records = "183" , events = "3year_followup_arm_1")
edc_data
e
edc_datas <- edc_datas[which(edc_datas$map_id==as.integer(map_id)),]
edc_data <- edc_datas[which(edc_datas$redcap_event_name == events[epochh+1]),]
if (e == 1) {
edc_elig <- edc_datas[which(edc_datas$redcap_event_name == events[epochh]),]
gds <- edc_elig$gds_total_score
} else {gds <- edc_data$gds_total_score}
gds
shiny::runApp('MAP2_Uploader/Uploader')
runApp('TAP_Uploader/Uploader')
runApp('TAP_Uploader/Uploader')
pwd
runApp('TAP_Uploader/Uploader')
runApp('TAP_Uploader/Uploader')
vmac <- 229
epochh <- 1
library(ggplot2)
library(plotly)
library(redcapAPI)
library(WordR)
library(officer)
library(Hmisc)
library(tidyverse)
library(flextable)
library(ggpattern)
library(patternplot)
library(png)
library(readxl)
ex_path <- paste0("~/Letter_Auto/epoch5dde_lookup.xlsx")
np <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "79321D56C26DD34A7F03A318096D77F4", conn, project = 136221)
pdb <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "0E16F65FB0A51C570781384D91AA1A78", conn, project = 137402)
edc <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "A2F023358C81C065E1D98575795DCD5B", conn, project = 135160)
edc_datas <- exportReports(edc, 280483)
pdb_datas <- exportReports(pdb, 270431)
np_datas <- exportReports(np, 280482)
pdb_datas <- pdb_datas[which(as.integer(as.factor(pdb_datas[,"redcap_event_name"]))== epochh),]
i <- which(pdb_datas["vmac_id"]==as.integer(vmac))
pdb_data <- pdb_datas[i,]
# NP Norm Scores
np_datas <- np_datas[grep(vmac,np_datas$record_id),]
np_data <- np_datas[grep("--1",np_datas$record_id),]
edc_data <- edc_datas[which(edc_datas["vmac_id"]==as.integer(vmac)),]
print("Compiling Memory results")
pdb_data$race
gds
edc_data$gds
edc_data$gds_total
edc_data
edc_datas <- edc_datas[which(edc_datas["vmac_id"]==as.integer(vmac)),]
edc_data <- edc_datas[which(is.na(edc_datas$redcap_repeat_instrument)),]
edc_data
race <- pdb_data$race
race
as.character(race)
runApp('TAP_Uploader/Uploader')
runApp('TAP_Uploader/Uploader')
race
runApp('TAP_Uploader/Uploader')
label(race)
ra <- as.character(race)
label(ra)
label(ra) <- "race"
label(ra)
race <- as.character(pdb_data$race)
label(race)
runApp('TAP_Uploader/Uploader')
runApp('MAP2_Uploader/Uploader')
vmac <- 3975
epochh <- 1
library(ggplot2)
library(plotly)
library(redcapAPI)
library(WordR)
library(officer)
library(Hmisc)
library(tidyverse)
library(flextable)
#library(ggpattern)
#library(patternplot)
library(png)
library(readxl)
# Global Pathing
local <- 1
online <- 0
if (local) {
# Add Local Paths Here
out_path <- "C:/Users/sweelyb/Documents/output/"
main_path <- "C:/Users/sweelyb/Documents/Letter_Auto/"
} else if (online) {
# Add Global Paths Here
out_path <- "/app/"
main_path <- "/srv/shiny-server/"
}
ex_path <- paste0(main_path,"epoch5dde_lookup.xlsx")
FII <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "489C53D4DAAE99F87EF37A9D77563BB0",conn,project = 42471)
tm7yr <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "1769F48432D599795BAA88493EFFCF3F",conn,project = 117460)
tm60 <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "54A5137E46FFC775D9BC1117DA32B30A",conn,project = 80145)
tm36 <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "3CCD5E3C8A09BE5F6E940B291A9BC6B4",conn,project = 73222)
tm18 <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "04661B3930D4F892AB1F194C287EE98B",conn,project = 56822)
tme <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "1A5DACDD0A80C92D60FCCC27A501286E",conn,project = 39332)
pdb <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "496ED1BD518B29CB96B5CFD9C48844FE", conn, project = 136242)
pdb_datas <- exportReports(pdb, 267451)
# NP Norm Scores
dde <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "0676EDF59CA88377654227BB56028EEE", conn, project = 124389)
dde2 <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "F009A86ED43B42332AC26C21411F37BC", conn, project = 140071)
EDC <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "09B0A6B7F207F51C6F656BAE567FA390", conn, project = 119047)
dde_datas <- exportReports(dde, 275632)
dde2_datas <- exportReports(dde2, 277386)
edc_datas <- exportReports(EDC, 275637)
echo_datas <- exportReports(EDC,281651)
cond_datas <- exportReports(EDC,284613)
dep_datas <- exportReports(EDC,294830)
events <- c("eligibility_arm_1","enrollmentbaseline_arm_1","18month_followup_arm_1","3year_followup_arm_1","5year_followup_arm_1","7year_followup_arm_1","9year_followup_arm_1","11year_followup_arm_1")
map_data <- pdb_datas[which(pdb_datas$vmac_id==as.integer(vmac)),]
rev_data_frame <- apply(map_data, 2, rev)
map_data <- as.data.frame(rev_data_frame)
pdb_data <- map_data[which(map_data[,"redcap_event_name"]== events[epochh+1]),]
map_id <- pdb_data$map_id
if (nchar(map_id)==1) {inp <- paste0("00",map_id)} else if (nchar(map_id)==2) {inp <- paste0("0",map_id)} else {inp <- map_id}
fail <- 0
dde_data <- dde2_datas[grep(inp,dde2_datas$record_id),]
#if (length(dde_data$record_id)==0) {fail <- 1}
ij <- grep("--1",dde_data$record_id)
if(length(ij)==0) {ij <- 1}
edc_data <- edc_datas[which(edc_datas$map_id==as.integer(map_id)),]
if (length(edc_data$map_id)==0) {fail <- 1}
edc_data <- edc_data[which(edc_data[,"redcap_event_name"]== events[epochh+1]),]
dep_data <- dep_datas[which(dep_datas$map_id==as.integer(map_id)),]
if (length(dep_data$map_id)==0) {fail <- 1}
dep_data <- dep_data[which(dep_data[,"redcap_event_name"]== events[epochh]),]
echo_datas <- echo_datas[which(echo_datas$map_id==as.integer(map_id)),]
echo_datas_brain <- echo_datas[which(is.na(echo_datas$redcap_repeat_instrument)==FALSE),]
echo_datas <- echo_datas[which(is.na(echo_datas$redcap_repeat_instrument)),]
echo_data <- echo_datas[which(echo_datas[,"redcap_event_name"]== events[epochh+1]),]
#echo_data <- echo_data_s[which(is.na(echo_data_s$redcap_repeat_instrument)),]
brain_data <- echo_datas_brain[which(echo_datas_brain[,"redcap_event_name"]== events[epochh+1]),]
if (length(echo_data$map_id)==0) {fail <- 1}
cond_datas <- exportReports(EDC,284613)
cond_datas <- cond_datas[which(cond_datas[,"redcap_event_name"]== events[epochh+1]),]
cond_data <- cond_datas[which(cond_datas["map_id"]==as.integer(pdb_data$map_id)),]
cond_data <- cond_data[1,]
bc <- cond_data$blood_complete; if (is.na(bc)) {bc <- "No"}
ec <- cond_data$echo_complete; if (is.na(ec)) {ec <- "No"}
nc <- cond_data$np_complete; if (is.na(nc)) {nc <- "No"}
echo_data$vf_arrival_date_time
enroll_date <<- format(as.Date(echo_data$vf_arrival_date_time), "%m/%d/%Y")
format(as.Date(map_data[1, "visit1_date"]), "%m/%d/%Y")
format(as.Date(pdb_data$visit1_date), "%m/%d/%Y")
runApp('MAP2_Uploader/Uploader')
library(usethis)
install.packages("usethis")
library(usethis)
use_git_config(user.name = "bsweely", user.email = "bsweely@vols.utk.edu")
git_vaccinate()
gitcreds::gitcreds_set()
library(sys)
system("git")
gitcreds::gitcreds_set()
git
gitcreds::gitcreds_set()
system("powershell git")
gitcreds::gitcreds_set()
system("git")
system("git")
system("git")
system("git")
detach("package:sys", unload = TRUE)
library(sys)
system("git")
system("git")
system("git")
detach("package:sys", unload = TRUE)
library(sys)
library(sys)
gitcreds::gitcreds_set()
system("git")
git
system("git")
system("git")
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
library(gitcreds)
gitcreds::gitcreds_set()
create_github_token()
gitcreds::gitcreds_set()
library(usethis)
library(gitcreds)
library(sys)
gitcreds::gitcreds_set()
usethis::git_sitrep()
View(brain_data)
git
cd
gitcreds::gitcreds_set()
usethis::git_sitrep()
library(usethis)
use_git_config(user.name = "bsweely", user.email = "bsweely@vols.utk.edu")
git_vaccinate()
usethis::git_sitrep()
shiny::runApp('TAP_Uploader/Uploader')
getwd()
source("~/Letter_Auto/TAP_Uploader/previsit_uploader.R")
source("~/Letter_Auto/TAP_Uploader/ty_uploader.R")
source("~/Letter_Auto/TAP_Uploader/fb_uploader.R")
source("~/Letter_Auto/TAP_Uploader/LP_uploader.R")
source("~/Letter_Auto/TAP_Uploader/np_uploader.R")
source("~/Letter_Auto/TAP_Uploader/pv_uploader.R")
source("~/Letter_Auto/TAP_Uploader/cond_uploader.R")
source("~/Letter_Auto/TAP_Uploader/blood_uploader.R")
source("~/Letter_Auto/TAP_Uploader/brain_uploader.R")
source("~/Letter_Auto/TAP_Uploader/echo_uploader.R")
runApp('TAP_Uploader/Uploader')
fb_uploader(1,229)
epochh <- 1
vmac <- 229
library(ggplot2)
library(plotly)
library(redcapAPI)
library(WordR)
library(officer)
library(Hmisc)
library(tidyverse)
library(flextable)
library(ggpattern)
library(patternplot)
library(png)
library(readxl)
# Global Pathing
local <- 1
online <- 0
if (local) {
# Add Local Paths Here
out_path <- "C:/Users/sweelyb/Documents/output/"
main_path <- "C:/Users/sweelyb/Documents/Letter_Auto/"
} else if (online) {
# Add Global Paths Here
out_path <- "/app/"
main_path <- "/srv/shiny-server/"
}
edc <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "A2F023358C81C065E1D98575795DCD5B", conn, project = 135160)
np <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "79321D56C26DD34A7F03A318096D77F4", conn, project = 136221)
pdb <- redcapConnection(url = "https://redcap.vanderbilt.edu/api/",
token = "0E16F65FB0A51C570781384D91AA1A78", conn, project = 137402)
pdb_datas <- exportReports(pdb, 270431)
np_datas <- exportReports(np, 280482)
edc_datas <- exportReports(edc, 280483)
events <- c("enrollmentbaseline_arm_1","18month_followup_arm_1","3year_followup_arm_1","5year_followup_arm_1","7year_followup_arm_1")
pdb_datas <- pdb_datas[which(as.integer(as.factor(pdb_datas[,"redcap_event_name"]))== epochh),]
i <- which(pdb_datas["vmac_id"]==as.integer(vmac))
pdb_data <- pdb_datas[i,]
edc_datas <- edc_datas[which(edc_datas["vmac_id"]==as.integer(vmac)),]
edc_data <- edc_datas[which(is.na(edc_datas$redcap_repeat_instrument)),]
brain_data <- edc_datas[which(is.na(edc_datas$redcap_repeat_instrument)==FALSE),]
np_datas <- np_datas[grep(vmac,np_datas$record_id),]
np_data <- np_datas[grep("--1",np_datas$record_id),]
bc <- edc_data$blood_complete; if (is.na(bc)) {bc <- "No"}
ec <- edc_data$echo_complete; if (is.na(ec)) {ec <- "No"}
nc <- edc_data$np_complete; if (is.na(nc)) {nc <- "No"}
(bc == "No" & ec =="No" & nc == "No")
err <<- ""
e <- epochh
Epoch_conv <- c("Baseline","1-Year","2-Year","3-Year","4-Year","5-Year","6-Year","7-Year")
Epoc_conv <- c("baseline","1-year","2-year","3-year","4-year","5-year","6-year","7-year")
Epoch <<- Epoch_conv[e]; Epoc <<- Epoc_conv[e]
#Epoch2 <<- Epoch_conv[e-2]; Epoc2 <<- Epoc_conv[e-2]
#Epoch1 <<- Epoch_conv[e-1]; Epoc1 <<- Epoc_conv[e-1]
epoch_conv <- c("base","1yr","2yr","3yr","4yr","5yr","6yr","7yr")
#epoch2 <<- epoch_conv[e-2]
#epoch1 <<- epoch_conv[e-1]
epoch <<- epoch_conv[e]
ep_next <<- epoch_conv[e+1]
ep <- epoch
date_next <<- paste0("visit_estimate_",ep_next,"_date")
date_ty <<- format(as.Date(pdb_data[, date_next]), "%B %Y")
vmac_id <- as.character(pdb_data[,"vmac_id"])
ind <- as.integer(vmac_id)
i<-1
enroll_date <<- format(as.Date(pdb_data$visit1_date), "%m/%d/%Y")
first_name <<- pdb_data$preferred_name
if (is.na(first_name)) {first_name <<- pdb_data$first_name}
last_name <<- pdb_data$last_name
street_address <<- pdb_data$street_address
city <<- pdb_data$city
state <<- pdb_data$state
zipp <<- pdb_data$zip
dob <<- format(as.Date(pdb_data$dob), "%m/%d/%Y")
sex <<- as.character(pdb_data$sex)
gender <- ""
if (sex=="Female") {gender<<- "women"} else {gender <<- "men"}
if (sex=="Female") {gender_cap<<- "Women"} else {gender_cap <<- "Men"}
pronoun_conv<<- c("Female" = "she", "Male" = "he")
pronoun_conv_obj<<- c("Female" = "her", "Male" = "him")
pronoun_conv_poss<<- c("Female" = "her", "Male" = "his")
pronoun_conv_poss_cap<<- c("Female" = "Her", "Male" = "His")
pronoun<<- pronoun_conv[sex]
pronoun_obj<<- pronoun_conv_obj[sex]
pronoun_poss<<- pronoun_conv_poss[sex]
pronoun_poss_cap<<- pronoun_conv_poss_cap[sex]
salutation<<- as.character(pdb_data$salutation)
fb_date <<- pdb_data$feedback_date
if (is.na(fb_date)) {feedback_date <<- "MISSING"} else {feedback_date <<- format(as.Date(fb_date), "%m/%d/%Y")}
feedback_location <<- as.character(pdb_data[i, "feedback_location"])
if (is.na(feedback_location)) {feedback_location <<- "MISSING"}
weight <- as.integer(edc_data$weight)
df <- data.frame(
Test = c("Heart rate", "Blood pressure", "Height", "Weight", "Body Mass Index"),
Test.1 = c("Heart rate", "Blood pressure", "Height", "Weight", "Body Mass Index"),
CR = c(edc_data$echo_hrate,edc_data$echo_sbp, paste0(edc_data$height," inches"), paste0(weight," lbs"), round((weight/2.205)/((edc_data$height/39.37)^2),digits = 1)),
CR = c(edc_data$echo_hrate,edc_data$echo_dbp, paste0(edc_data$height," inches"), paste0(weight," lbs"), round((weight/2.205)/((edc_data$height/39.37)^2),digits = 1)),
NR = c("60-100", "<120 / <80", "n/a", "n/a", "18.5-24.9")
)
ft <- flextable(df)
ft <- set_header_labels(ft, Test = "Test", Test.1="Test",
CR = paste0("Current ",Epoch," Results ", enroll_date),CR.1 = paste0("Current ",Epoch," Results ", enroll_date),
NR = "Normal Range*" )
ft <- bg(ft, bg="grey",part = "header")
ft <- fontsize(ft, j=1:5, size = 10, part="header")
ft <- fontsize(ft, j=1:5, size = 10, part="body")
ft <- width(ft,j = 5, width = 1)
ft <- font(ft, fontname = "Arial", part="body")
ft <- font(ft, fontname = "Arial", part="header")
ft <- merge_h(ft,part = "header")
ft <- merge_h_range(ft,i = 1:5,j1=1, j2=2 ,part = "body")
ft <- merge_h_range(ft,i = 1,j1=3, j2=4 ,part = "body")
#ft <- merge_h_range(ft,i = 1,j1=5, j2=6 ,part = "body")
#ft <- merge_h_range(ft,i = 1,j1=7, j2=8 ,part = "body")
#ft <- merge_h_range(ft,i = 1,j1=9, j2=10 ,part = "body")
ft <- merge_h_range(ft,i = 3:5,j1=3, j2=4 ,part = "body")
#ft <- merge_h_range(ft,i = 3:5,j1=5, j2=6 ,part = "body")
#ft <- merge_h_range(ft,i = 3:5,j1=7, j2=8 ,part = "body")
#ft <- merge_h_range(ft,i = 3:5,j1=9, j2=10 ,part = "body")
ft <- width(ft,j = 3:4, width = .5)
ft <- width(ft, j=1:2, width = .75)
ft <- theme_box(ft)
ft <- align(ft, align = "center", part="header")
ft <- align(ft, align = "center", part="body")
ft <- align(ft, i = 1:5, j = 1:2, align="left",part="body")
for (ii in 3:(ncol(df)-1)) {if ((as.integer(df[1,ii]) < 60) | (as.integer(df[1,ii]) >100)) {ft <- bold(ft, i = 1, j = ii, bold = TRUE, part = "body")}
if (as.integer(df[2,ii]) > 120) {ft <- bold(ft, i = 2, j = ii, bold = TRUE, part = "body")}
if ((as.double(df[5,ii]) < 18.5) | (as.double(df[5,ii]) > 24.9)) {ft <- bold(ft, i = 5, j = ii, bold = TRUE, part = "body")}}
evens <- c(4,6,8,10)
df2 <- data.frame(
Test1 = c("Cholesterol", "Cholesterol", "Cholesterol", "Cholesterol", "Blood Sugar", "Blood Sugar", "Blood Sugar", "Thyroid", "Inflammation"),
Test2 = c("Total","HDL", "LDL", "Triglycerides", "Hemoglobin A1C", "Fasting Insulin", "Fasting Glucose", "Thyroid Stimulating Hormone (TSH)", "High Sensitivity C-Reactive Protein"),
CR = as.character(c(edc_data$bld_c_chol, edc_data$bld_c_hdlc, edc_data$bld_c_ldlc, edc_data$bld_c_trig,edc_data$bld_c_hgba1c, edc_data$bld_c_insulin, edc_data$bld_c_glucose, edc_data$bld_c_tsh, edc_data$bld_c_crp)),
NR = c("<200", "men >40, women >50", "<100", "<150", "<5.7", "<17", "70-99", "0.35-3.6", "0-2.9")
)
ft2 <- flextable(df2)
ft2 <- width(ft2, j = 1:4, width=.9)
ft2 <- set_header_labels(ft2, Test1 = "Test", Test2 = "Test", CR = paste0("Current ",Epoch," Results ", enroll_date), NR = "Normal Range/\nCut-off*" )
ft2 <- merge_at(ft2, i = 1, j = 1:2, part = "header")
ft2 <- merge_at(ft2, i = 1:4, j = 1, part = "body")
ft2 <- merge_at(ft2, i = 5:7, j = 1, part = "body")
ft2 <- bg(ft2, bg="grey",part = "header")
ft2 <- fontsize(ft2, j=1, size = 9, part="body")
ft2 <- fontsize(ft2, j=1:4, size = 10, part="header")
ft2 <- fontsize(ft2, j=2:4, size = 10, part="body")
ft2 <- font(ft2, fontname = "Arial", part="body")
ft2 <- font(ft2, fontname = "Arial", part="header")
ft2 <- theme_box(ft2)
ft2 <- align(ft2, align = "center", part="header")
ft2 <- align(ft2, align = "center", part="body")
ft2 <- align(ft2, i=1:9, j=2, align="left",part="body")
ft2 <- valign(ft2, i=1:9, j=3:4, valign="top", part="body")
ft2 <- height(ft2, height = .4, part = "header")
ft2 <- width(ft2, j = 1, width = .85)
ft2 <- width(ft2, j = 2, width = 1.25)
for (ii in 3:(ncol(df2)-1)) {
if (df2[1,ii]=="-"){ft2<-bold(ft2, i = 1, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[1,ii]) > 200){ft2<-bold(ft2, i = 1, j = ii, bold = TRUE, part = "body")}}
if (df2[2,ii]=="-"){
ft2<-bold(ft2, i = 2, j = ii, bold = FALSE, part = "body")}
else{
if (sex == "Female" & as.integer(df2[2,ii]) < 50){ft2 <- bold(ft2, i = 2, j = ii, bold = TRUE, part = "body")}
if (sex == "Male" & as.integer(df2[2,ii]) < 40){ft2 <- bold(ft2, i = 2, j = ii, bold = TRUE, part = "body")}
}
if (df2[3,ii]=="-"){ft2<-bold(ft2, i = 3, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[3,ii]) > 100){ft2<-bold(ft2, i = 3, j = ii, bold = TRUE, part = "body")}}
if (df2[4,ii]=="-"){ft2<-bold(ft2, i = 4, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[4,ii]) > 150){ft2<-bold(ft2, i = 4, j = ii, bold = TRUE, part = "body")}}
if (df2[5,ii]=="-"){ft2<-bold(ft2, i = 5, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[5,ii]) > 5.7){ft2<-bold(ft2, i = 5, j = ii, bold = TRUE, part = "body")}}
if(class(df2[6,ii])=="character") {df2[6,ii] <- NA} else {
if (is.na(as.double(df2[6,ii]))) {ft2 <- bold(ft2, i = 6, j = ii, bold = TRUE, part = "body")} else {
if (df2[6,ii]=="-"){ft2<-bold(ft2, i = 6, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[6,ii]) > 17){ft2<-bold(ft2, i = 6, j = ii, bold = TRUE, part = "body")}}
}
}
if (df2[7,ii]=="-"){ft2<-bold(ft2, i = 7, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[7,ii]) > 99 | as.integer(df2[7,ii]) < 70){ft2<-bold(ft2, i = 7, j = ii, bold = TRUE, part = "body")}}
if (df2[8,ii]=="-"){ft2<-bold(ft2, i = 8, j = ii, bold = FALSE, part = "body")}else{if(as.integer(df2[8,ii]) > 3.6 | as.integer(df2[8,ii]) < 0.35){ft2<-bold(ft2, i = 8, j = ii, bold = TRUE, part = "body")}}
if(class(df2[9,ii])=="character") {df2[9,ii] <- NA} else {
if (is.na(as.double(df2[9,ii]))) {ft2 <- bold(ft2, i = 9, j = ii, bold = TRUE, part = "body")} else {
if ((as.double(df2[9,ii]) > 2.9) | (as.double(df2[9,ii]) < 0)) {ft2 <- bold(ft2, i = 9, j = ii, bold = TRUE, part = "body")}}
}
}
first_name_physician1<<- pdb_data$feedback_physician1_first_name
last_name_physician1<<- pdb_data$feedback_physician1_last_name
credentials1<<- pdb_data$feedback_physician1_credentials
street_address_physician1<<- pdb_data$feedback_physician1_street_address
city_physician1<<- pdb_data$feedback_physician1_city
state_physician1<<- pdb_data$feedback_physician1_state
zip_physician1<<- pdb_data$feedback_physician1_zip
first_name_physician2<<- pdb_data$feedback_physician2_first_name
last_name_physician2<<- pdb_data$feedback_physician2_last_name
credentials2<<- pdb_data$feedback_physician2_credentials
street_address_physician2<<- pdb_data$feedback_physician2_street_address
city_physician2<<- pdb_data$feedback_physician2_city
state_physician2<<- pdb_data$feedback_physician2_state
zip_physician2<<- pdb_data$feedback_physician2_zip
first_name_physician3<<- pdb_data$feedback_physician3_first_name
last_name_physician3<<- pdb_data$feedback_physician3_last_name
credentials3<<- pdb_data$feedback_physician3_credentials
street_address_physician3<<- pdb_data$feedback_physician3_street_address
city_physician3<<- pdb_data$feedback_physician3_city
state_physician3<<- pdb_data$feedback_physician3_state
zip_physician3<<- pdb_data$feedback_physician3_zip
if (is.na(first_name_physician1)) {first_name_physician1<<- ""} else {first_name_physician1 <<- paste0("     1.  ",first_name_physician1)}
if (is.na(last_name_physician1)) {last_name_physician1<<- ""}
if (is.na(street_address_physician1)) {street_address_physician1 <<- ""} else {street_address_physician1 <<- paste0("          ",street_address_physician1)}
if (is.na(city_physician1)) {city_physician1 <<- ""} else {city_physician1 <<- paste0("          ",city_physician1,",")}
if (is.na(state_physician1)) {state_physician1 <<- ""}
if (is.na(zip_physician1)) {zip_physician1 <<- ""}
# Initialize memory variables
age <- pdb_data$age
if (age<60) {age_r <- 0}; if (age < 70 & age >= 60) {age_r <- 4}; if (age < 80 & age >= 70) {age_r <- 8}; if (age < 90 & age >= 80) {age_r <- 12}; if (age >= 90) {age_r <- 16}
edu <- pdb_data$education
if (edu<=12) {edu_r <- 1}; if (edu < 16 & edu >= 13) {edu_r <- 2}; if (edu == 16) {edu_r <- 3}; if (edu >= 17) {edu_r <- 4}
ind <- age_r + edu_r
if (sex=="Male") {sex_r <- 0} else {sex_r <- 2}
np_moca_total <<- np_data$np_moca_total
craftvrs <<- np_data$craftvrs
crafturs <<- np_data$crafturs
craftdvr <<- np_data$craftdvr
craftdre <<- np_data$craftdre
udsbentc <<- np_data$udsbentc
udsbentd <<- np_data$udsbentd
digforct <<- np_data$digforct
digforsl <<- np_data$digforsl
digbacct <<- np_data$digbacct
digbacls <<- np_data$digbacls
minttots <<- np_data$minttots
udsverfc <<- np_data$udsverfc
udsverlc <<- np_data$udsverlc
udsvertn <<- np_data$udsvertn
animals <<- np_data$animals
veg <<- np_data$veg
traila <<- np_data$traila
trailb <<- np_data$trailb
# GET MEAN and SD
moca_ex <- read_excel(main_path,"TAP_np_lookup.xlsx", sheet = "moca")
moca_mean <- moca_ex[ind,1+sex_r]
moca_sd <- moca_ex[ind,2+sex_r]
main_path
np_path <- paste0(main_path,"TAP_np_lookup.xlsx")
runApp('TAP_Uploader/Uploader')
